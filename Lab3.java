import java.util.Scanner;

/**
 * <h1> CS 150 - Lab 3 - String Encryption Using Caesar's Shift</h1>
 * 
 * <h2>Topics Covered:</h2>
 * <ul>
 * 		<li>Scanner practice</li>
 * 		<li>String, int, and character practice</li>
 * 		<li>Method usage</li>
 * 		<li>Exposure to for loops</li>
 * 
 * @author Jess Cobb <br>
 * Course: CS 150 - Fall 2018
 * @version 1.0_Fall18
 */
public class Lab3 {

	/**
	 * Main method. Students should only add code in the TODO section.
	 * This involves instantiating a Scanner to read from the keyboard (i.e. standard input),
	 * printing prompts to the console (i.e. standard output), and assigning local variables 
	 * user input.
	 * @param args --> args not utilized in this program
	 */
	public static void main(String[] args) {
		//Local variables.
		String userPlainText = "", cipherText = "", plainText = "";
		int userKey = 0;
		
		//TODO: your code here
		
		
		//Method invocation.
		cipherText = encryptPlainText(userPlainText, userKey);
		plainText = decryptCipherText(cipherText, userKey);
		
		//Print output.
		System.out.println("Cipher text: " + cipherText);
		System.out.println("Plain text: " + plainText);
		
	} // end main()

	/**
	 * This method encrypts the user input from main(). You should generate one cipher character
	 * from plainText at a time using casting. Then you will concatenate this new character to cipherText.
	 * @param plainText An incoming String value from main() - the String to encrypt.
	 * @param key An incoming int value from main - the key for encryption.
	 * @return cipherText The String generated by this method and returned to main().
	 */
	public static String encryptPlainText(String plainText, int key) {
		//Local variables.
		char plainTextChar = ' ', cipherTextChar = ' ';
		String cipherText = "";
		
		//Generate ciphertext and assign to cipherText variable.
		for (int i = 0; i < plainText.length(); i++) {
			plainTextChar = plainText.charAt(i);
			//TODO: your code here
			
		}
		
		//Return cipherText.
		return cipherText;
	} //end encryptPlainText()
	
	/**
	 * This method decrypts the encrypted text, which is a String sent from main(). 
	 * You will first need to access each character from cipherText and assign that
	 * character to cipherTextChar. See encryptPlainText() for an example. Then generate
	 * the plain text character with casting again and utilizing the mathematical reverse 
	 * of the key. Concatenate the unencrypted characters to plainText.
	 * @param cipherText
	 * @param key
	 * @return plainText The String generated by this method and returned to main().
	 */
	public static String decryptCipherText(String cipherText, int key) {
		//Local variables.
		char cipherTextChar = ' ', plainTextChar = ' ';
		String plainText = "";
		
		//Generate plaintext and assign to plainText variable.
		for (int i = 0; i < cipherText.length(); i++) {
			//TODO: you code here
			
		}
		
		//Return plainText.
		return plainText;
	} // end decryptCipherText
}
